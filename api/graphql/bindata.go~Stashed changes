// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x5b\x6f\xdc\x36\x13\x7d\x5e\xfd\x8a\xb1\x37\x80\xbd\xc0\x66\x91\x7c\xdf\xdb\x02\x45\xd1\x26\x2d\xb0\x40\x73\x69\x6d\xb4\x0f\x45\x1f\x66\xa9\x91\x44\x98\xe2\xb0\xbc\xac\x22\x04\xf9\xef\xc5\x90\x94\xe2\xb8\x0d\xda\x17\x7b\x45\x0e\xcf\xdc\xce\x9c\x09\x6a\xa0\x11\xe1\x63\xb3\xd9\xc2\x2f\xcc\x11\xfe\x4c\xe4\x67\x88\xb3\xa3\x66\x93\x7f\x1f\xe1\x67\xf9\xd7\xac\x16\x63\x8a\x18\x35\xdb\x6a\xb4\x7c\x1e\xe1\x4d\xfd\xd5\x7c\x6a\x1a\xb9\x2b\x0f\x05\x3b\x0c\xec\xc2\x11\x7e\xbf\x1b\xd8\x5d\xfd\x71\x55\x0e\x6e\xe5\xcf\xe9\xf5\x11\x4e\xaf\xaf\x76\x47\x90\xbb\xf5\xe5\x02\x05\x1f\x1b\x39\xdb\xc2\xd3\xd3\x2d\x6c\x94\x27\x8c\x74\xf7\x15\xa4\x2d\x88\xcd\x16\x7e\x1b\x30\x82\xa7\x11\xb5\x0d\xa0\x03\xc4\x81\x20\x24\xe7\xd8\x47\xe8\xd8\x43\xab\xbb\x8e\x3c\xd9\x08\x2a\x79\x4f\x56\x69\x0a\x07\x38\x75\x62\xe8\x09\x26\x0c\x10\x78\xa4\x02\x56\x4d\x66\x88\x82\x3a\x11\x28\x4e\xa6\x05\xcb\x71\xc5\x9c\x74\x1c\x20\xe8\xd1\x19\x82\x96\x8d\x41\x0f\x68\x5b\x50\x64\x63\x80\x0b\x9a\x54\xa1\x26\x82\x29\x3f\x76\x9e\x2f\xba\x25\x40\x0b\xd8\xb6\x5a\xf2\x43\x03\xdf\xbd\x3f\xe5\xf0\xe2\xc0\x81\x0a\x28\xc2\xc8\x9e\xa0\x27\x4b\x1e\x0d\x4c\x38\x03\x77\x05\x4c\x5b\x97\x62\xd4\xb6\xcf\xe9\xe1\xc8\xc9\x46\xb8\xa5\x43\x7f\x80\xbb\xe8\xb5\xed\x77\x39\x08\xb9\x5c\x52\xd8\xe7\x93\x49\x1b\x23\xc7\xb6\x06\x25\x9f\x03\xda\xd6\x50\x36\x76\xe8\x83\xb6\xfd\x1e\x42\x1a\xc7\x5c\xfa\x3d\x50\x54\x87\x12\xd0\x75\x88\x1e\x23\xf5\xf3\x35\x38\x8c\x91\xbc\x3d\x14\x98\xfb\x81\xa0\x67\x16\x87\x25\x26\x4e\xfd\x50\x8a\x8f\x31\x03\x7b\xc2\x96\x3c\x28\xa3\xa5\xf2\x13\xdb\x9b\x08\x6a\x40\xdb\x13\xd0\x85\x2c\x68\x9b\x6d\x6b\xd5\x31\xd0\x1e\xce\xa4\x30\x85\x1c\xd7\x5c\x4b\x77\x26\xc0\xf0\x20\x2e\x4a\xa9\x08\x5a\x1d\x9c\xc1\xb9\x14\x7a\x0f\xd3\xa0\x55\x76\x8c\xd0\xa1\xf6\x05\x2e\x7a\x6c\x89\xbb\x0e\xb0\xb0\x61\xf2\x3a\xae\xb1\x04\x40\x4f\x30\x26\x35\x80\xa1\x10\xe0\x3a\x90\x0d\x3a\xea\x0b\x5d\x4b\x50\x68\x81\x14\x8f\x23\x79\x55\xfb\x78\x4e\x41\x5b\xb1\x94\x72\x0a\x53\x4a\xce\x46\x3f\x90\x78\x65\xaf\x08\x92\x6b\x31\x12\x28\xb4\x12\xb2\x0e\x21\x51\x0b\x91\xc5\xfb\x98\x4b\x59\xa0\x72\x7b\x3b\x43\x1f\xf4\x59\x1b\x1d\xe7\xc3\x67\x96\xbf\xf7\xdc\x26\x15\x4f\xf6\x29\xdd\xf7\xc2\x1f\xb9\x7a\x8b\x23\x1d\x6b\xb7\xaf\xf6\x95\x7a\xe1\x08\x27\x1b\xaf\xf6\x85\x7e\xe5\x63\x77\x84\x8a\x56\x67\xa4\x78\x78\xe7\x5b\xf2\x7f\xc7\xdf\x1d\x21\xdf\x54\x5b\x6c\xdb\xfa\xf8\x9e\xf3\xf9\x3f\xc6\xb2\x7e\x0f\x3c\xbd\x41\x3b\x17\xc7\xf0\x0d\xbc\xdc\x1d\xe1\x27\x6d\xe9\x14\x69\x6c\xb6\xb0\x4c\xbb\x38\x15\x99\xa8\xcf\x45\x29\xaa\x97\x2c\x16\x2c\x8e\xe4\x30\x7b\x94\xa3\x66\x13\x39\xa2\xb9\x43\x43\xe1\x08\xaf\x73\xae\xbf\xe6\xd9\x5a\x20\xeb\x7b\x41\x35\xd2\x9f\x93\x7d\xb7\xa0\x2c\x01\x64\x6c\xe7\xb5\xa2\x2f\x21\xfe\x1d\x3c\x43\xad\xd0\xff\x01\x32\x4b\xd8\x2b\xf6\x9e\x82\x63\xdb\x06\x69\xfe\x0d\x5b\x02\xcf\xd3\x0d\x70\x27\xbc\xca\xa0\xd2\xf2\x1f\x64\x6c\xbf\x4f\xb3\xd0\x08\xc1\x30\x76\x62\x71\x96\x91\xc9\x24\x43\x50\xe8\x23\x5b\x39\x1d\xb5\x79\x80\x11\x67\xf0\x14\x92\x89\x95\xa2\x5c\x3b\x96\xa7\x34\x4e\x0c\x12\x27\xe8\x48\x63\x38\x36\x5b\x00\xb8\x79\xf9\xe1\x09\xf0\x73\x78\xf6\xff\xc3\x8b\x17\x37\xe2\x61\x35\x79\xe2\xe7\x39\x3c\xfb\x9f\xd8\x94\x22\x2c\x39\x97\xdd\x21\x23\xaf\xd6\x04\x25\xf4\xda\x4c\x79\x2d\x53\xb6\x86\x20\xd6\xaf\xca\x24\x24\xab\xd9\x52\xbb\xc8\xdb\x1d\xf9\x8b\x56\x54\xb4\x5e\x26\x3a\x0c\xda\x39\xc1\x12\xcd\x59\xe9\xf1\x99\xbf\x1b\xc1\x7a\x83\xf3\xf9\xb3\xa4\x4f\xa4\xfb\x21\x52\x5b\xb2\xfd\x16\x7e\x64\x0f\x96\x27\x91\xdb\x01\x2f\x24\x85\x27\xab\xd0\x85\x64\x64\x24\xb3\x20\x35\x59\x41\x83\x88\x70\x16\xbd\x1a\xb8\x8e\x81\x4c\x07\xb7\x2f\xc1\x9c\xc1\xa1\x7a\x90\x54\x44\xf2\xa6\x33\x79\xaf\x29\xec\x64\x43\xa2\x8d\x3a\x16\x86\x97\x78\xee\x85\x3c\x90\x49\x50\x72\xd7\x21\x27\xff\x75\x62\xe4\xda\x15\x25\x0c\xc3\xba\x50\x5a\x06\xb4\x33\x28\x34\x4a\x62\xd5\x6c\x43\x6d\xa8\x48\xbc\x8a\x09\xcd\xa2\xf4\xa5\x67\xf7\xb2\xb0\x3a\xd1\x10\xac\x3a\x50\x64\x10\xd8\x9a\xb9\xee\xba\xa2\x8e\x2e\x79\xc7\x81\x42\xd1\xfb\x90\xba\x4e\x2b\x12\xea\xbd\xa5\x0b\xf9\x38\x50\x96\xbe\x40\x0e\x3d\xe6\xad\xc2\xa9\xc8\xf6\xa3\xd0\x45\x55\x27\xf6\xd2\x38\x89\x92\x47\x67\xb4\x2a\x61\x36\x22\xd9\x29\x50\x0b\xe7\x19\x2c\x51\xbb\x2c\xa6\x12\x4e\xd6\xf6\x35\x63\x69\x83\x07\xb6\x07\xb8\x75\x38\x8f\xb9\x08\x85\x07\x61\x2f\x7b\x7f\xd0\xbe\x95\x3d\x14\xe7\xb5\x46\xd2\x28\x6d\x23\xf5\xbe\xf8\x93\x55\xc6\xb2\xae\xf3\x4b\xf2\xa5\x4c\xab\x30\x1b\xee\xb5\x6a\xb6\x20\xdf\x7d\xe9\x07\x3a\x9d\x39\xb5\x2b\x54\x7e\x9c\xd6\xca\xe6\x5a\x5b\x67\x52\x80\xdb\x51\x48\xb6\xfb\x62\x81\x56\x86\xf2\x94\x51\xf9\x51\x4e\xcd\xa6\x16\x7a\xd1\xe3\xe6\x53\xf3\x57\x00\x00\x00\xff\xff\x92\xc8\xfb\x26\x68\x09\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 2408, mode: os.FileMode(420), modTime: time.Unix(1537238398, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

