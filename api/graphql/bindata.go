// Code generated by go-bindata.
// sources:
// schema.graphql
// DO NOT EDIT!

package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\xc1\x8a\x1c\x37\x10\x3d\x8f\xbe\xe2\x99\x31\xec\x2e\xd8\x83\x9d\xdc\xe6\x12\x88\x93\xc0\x42\x1c\x27\xf1\x92\x4b\xc8\xa1\xa6\xbb\x66\x5a\x58\xad\x52\xa4\xd2\x76\x1a\xe3\x7f\x0f\xa5\xee\xe9\x2c\x0b\x01\x9f\x46\xd2\x54\xbd\x7a\xf5\xde\xeb\xd2\x0d\x3c\x12\x3e\xbb\xdd\x1e\xbf\x8b\x28\xfe\xae\x9c\x67\xe8\x9c\xd8\xed\xda\xf9\x88\xdf\xec\xc7\x6d\x15\x63\x55\x52\x2f\x71\x2d\xba\x5e\x8f\x78\xbf\x9e\xdc\x17\xe7\xec\xbf\xa5\x11\x9f\xdd\xf6\x70\xad\x78\xfa\xf6\x71\x90\x64\xf3\x53\x96\xbe\x76\x5a\x8e\xf8\xf3\xd7\xe5\xf8\xe2\xaf\x17\x6e\x27\xb9\xe7\x6c\x8f\x1f\xec\x60\x4f\xd7\xc6\xb5\xca\x7a\x83\x8f\x5c\xee\xe3\x87\x6b\xed\xcf\x3e\xf2\xbd\xf2\xd8\x10\x52\xf6\x1d\x1f\xf1\x83\x84\x40\xf9\x0f\x0a\x95\x37\x88\xd6\xb0\x01\x7c\x5d\xe3\x1e\xef\x24\x67\x2e\x49\x62\x5f\xa0\x82\x1b\x89\x8c\x2c\xd3\x0d\xe4\x0c\x8a\x0b\xe8\xc1\xed\xf1\xe3\xe1\x72\xc0\xf7\x75\xf6\xf1\x02\x42\x10\x3a\x5b\xc5\x29\x33\xf5\xa0\xd8\x83\xd0\x51\x56\x89\xf6\x3a\xfa\xf0\x09\x23\xcd\xc8\x5c\x6a\x50\xf8\x68\x50\x6d\x79\xb7\xc7\xe4\x75\x80\x4e\x02\xe3\x09\xaf\x3c\x96\xa3\xdb\x03\xb8\x79\xfb\xcf\x33\xe0\xd7\x78\xf9\xed\xe1\xcd\x9b\x1b\x9b\xb0\x95\x3c\x9b\xf3\x1a\x2f\xbf\xb1\x9a\x45\x84\xeb\xce\x4b\x08\x1e\x06\x46\xb7\x2d\x68\xd4\x57\x63\xac\x5b\x07\xfe\x8f\x82\x55\xbf\xa3\x88\x13\xa3\x46\x2f\x91\xfb\x85\x27\xe1\x23\xe7\x47\xdf\x71\x0b\x08\xce\x92\x51\x06\x9f\x92\x61\xb1\x76\x87\xcd\xea\xe3\xd5\x42\xb7\x33\xac\xf7\x34\x9f\x18\xa5\xa6\x24\x59\x31\xb1\xbf\x0c\xca\xfd\xb2\xed\x77\xf8\x49\x32\xa2\x4c\x98\x18\x03\x3d\xb2\x09\xcf\xb1\xa3\x54\x6a\x20\x65\xe8\x40\x0a\x43\xf1\xb1\xf8\x9e\x1b\xd3\x2b\x71\xaf\x85\xc3\x19\xb7\x6f\x11\x4e\x48\xd4\x7d\xb2\x55\x8a\x66\x9a\x4e\x9c\xb3\xe7\x72\x67\x51\xa7\xa8\x5e\xe7\x23\xee\xe3\xca\xe7\x41\x94\x02\x5a\x08\x96\xdd\x7d\x69\xcb\xff\x7f\x30\x9a\x76\xc1\x73\x54\x94\x41\x6a\xe8\x11\x45\xd1\x0b\x28\xce\xe8\x28\x74\xc6\xd5\x4b\x2c\xab\xa1\x03\x83\x3a\xad\x14\x40\xa3\xd4\xa8\xab\x67\x0f\x03\x67\x3e\x4b\x66\x93\x52\xb3\xe9\xf6\x68\x43\x20\x31\xcc\x4d\xcf\xde\x97\x14\x68\x46\xaa\x39\x49\x61\xc3\x0b\x01\xa5\x9e\xcf\xbe\x63\x8b\xde\x2f\xfc\xc8\x59\x07\x0e\x5c\x0a\x0a\x27\xca\xa4\x86\x23\x55\xdb\xd8\x27\xd4\xe1\x0b\x26\xc9\x66\x9c\xb1\x94\x31\x05\xdf\x2d\x34\xdd\x1e\x1d\xd5\xc2\x3d\x4e\x33\x22\x73\x8b\x83\xb5\x2f\x74\x7c\x6c\x97\x75\x63\xb3\x21\x43\xe2\x01\xb7\x89\xe6\xb1\x89\xb0\xe4\xa0\xbc\x72\x7b\x93\x2f\xf7\x48\x94\x75\xde\x34\x32\xa3\x7c\x54\xbe\xe4\x65\xde\x2b\x50\x14\x1d\x38\xb7\x4e\xce\x8b\x4c\xa7\x5a\xec\xeb\x2c\x08\x72\xf1\x9d\xdb\xc3\xee\x97\xc5\x0f\x4a\xbe\x65\xea\x6e\x89\xf2\xd3\xb5\xb6\x34\xaf\xda\xa6\x50\x0b\x6e\x47\x0b\xd9\xdd\xc2\xbb\xe6\xcc\xb1\x9b\xd7\x84\xca\xd4\x50\xe5\xc9\x4e\x6e\xb7\x0a\x7d\x5c\x7d\x70\x5f\xdc\xbf\x01\x00\x00\xff\xff\xe4\x07\x9c\xe0\x31\x05\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 1329, mode: os.FileMode(420), modTime: time.Unix(1537148108, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

