schema {
	# Root query type
	query: Query

	# Root mutation type
	mutation: Mutation
}

type Query {
	shops: [Shop!]!
	shopByName(shopName: String!): Shop!
	# Maybe later on shopByID, productByID, etc.
	
}

type Mutation {
	createShop(name: String!): Shop!

	# What remains is the support for different currencies. If there was some
	# currency that we could not support with simple dollar and cents value
	# we would provide an additional API for those with a more general way of
	# inputting the amount (e.g. String) and the currency, and will then
	# will handle the parsing, summation, etc. with "strategy" pattern.
	# The good thing though is that the reader client won't change even in that
	# case, because they would be asking for the display value, which is a fair
	# tradeoff as the writer clients are much less "sensitive" in an ecommerce
	# business and something like a force update can be issued to them with
	# more flexibility.
	createProductInShop(shopID: ID!, productName: String!, dollars: Int!, cents: Int!): Product!

	createOrderInShop(shopID: ID!): Order!

	addProductToOrder(shopID: ID!, productID: ID!, howMany: Int! = 1): LineItem!
}

type Shop {
	id: ID!
	name: String!
	products: [Product!]!
	orders: [Order!]!

	totalSales: DollarValue!
}

type Product {
	id: ID!
	name: String!
	linesInOrders: [LineItem!]!
	price: DollarValue!

	totalSold: DollarValue!
}

type Order {
	id: ID!
	lines: [LineItem!]!
	price: DollarValue!
}

# Corresponds to 'one row' of an Order.
# E.g. Buying a loaf of bread and a carton of milk may result in an order
# with two line items:
#   '1x loaf of bread - $3.00' and
#   '1x carton of milk - $2.00'
type LineItem {
	id: ID!
	# The corresponding product of the line item
	# Can be unioned with a Service type for shipping etc.
	product: Product!
	
	# Maybe support weighted items? For now we have to encapsulate that 
	# inside the product itself (1 lb pack of strawberries)
	quantity: Int!
	
	# Total price of this line
	price: DollarValue!
}

# The client should not do any calculations with the actual amount and
# Therefore a String value only for display purposes will suffice.
# Nevertheless separating out the DollarValue is worth any complications
# caused by needing the value in the client later on. (payment services,
# third party client side integrations, another server with business logic
# using this api etc.)
type DollarValue {
	# The amount plus (maybe) the currency for showing to the client
	display: String!
}
